Esercizio 1:

Dato un grafo G diretto e aciclico e un nodo x in V(G) progettare un algoritmo che ritorna il numero dei nodi raggiungibili da x a diastanza massima



Def DistMax(G,x):
	Dist=[-1,...,-1]
	Dist[x]=1
	Coda Q
	Q.push(x)

	while Q!=0:
		v=Q.pop()

		for z in v.adiacenti():
			if Dist[z]==-1
				Dist[z]=Dist[v]+1

			else if Dist[z]<Dist[v]+1:
				Dist[z]=Dist[v]+1

		
		m= max(Dist)
		count=0
		for i in Dist:
			if Dist[i]==m:
				count++
		return count